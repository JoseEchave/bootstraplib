% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bs_sass.R
\name{bootstrap}
\alias{bootstrap}
\alias{bootstrap_sass}
\title{Compile Bootstrap 4 (or 3) SASS with (optional) theming}
\usage{
bootstrap(
  theme = bs_theme_get(),
  jquery = jquerylib::jquery_core(3),
  options = sass::sass_options(),
  minified = TRUE,
  ...
)

bootstrap_sass(rules = list(), theme = bs_theme_get(), ...)
}
\arguments{
\item{theme}{one of the following:
\enumerate{
\item The result of \code{\link[=bs_theme_get]{bs_theme_get()}} (i.e., the current global theme).
\item \code{NULL}, which means use the latest version of Bootstrap with no custom theming.
\item A string containing a bootswatch theme and/or a Bootstrap major version. To specify
both, use the syntax \code{"theme@version"}, (e.g., \code{"cosmo@4"} for Bootstrap 4 cosmo
theme with BS3 compatibility). If no version is specified, the latest available
version is used (for more info, see \code{version} in \code{\link[=bs_theme_new]{bs_theme_new()}}).
\strong{Note}: this approach ignores global themes (i.e., \code{\link[=bs_theme_new]{bs_theme_new()}})
\item A \code{\link[sass:sass_layer]{sass::sass_layer()}} which contains a bootstraplib theme. Useful for adding
custom layers to the current theme without affecting the global state (e.g.,
\code{sass::sass_layer_merge(bs_theme_get(), my_layer())}).
}}

\item{jquery}{See \code{\link[jquerylib:jquery_core]{jquerylib::jquery_core()}}.}

\item{options}{Compiler options for Sass. Please specify options using
\code{\link[sass]{sass_options}}.}

\item{minified}{whether the resulting HTML dependency should minify the JS/CSS files.}

\item{...}{arguments passed along to \code{\link[sass:sass]{sass::sass()}}}
}
\description{
Use \code{bootstrap()} to compile Bootstrap Sass into CSS and return it,
along with other HTML dependencies, as a list of \code{\link[htmltools:htmlDependency]{htmltools::htmlDependency()}}s
(if you just want the CSS as a string, and a \code{\link[=bs_theme_new]{bs_theme_new()}} has been set,
you can call \code{sass::sass()} on the return value of \code{\link[=bs_theme_get]{bs_theme_get()}}).
Use \code{bootstrap_sass()} if you can assume Bootstrap already exists on the
page, but you want to leverage Bootstrap utilities (e.g., variables, functions,
or mixins) to generate additional CSS rules (as a string that can be included
as a \verb{<style>} tag via \code{tags$style(css)}).
}
\examples{

# Function to preview the styling a (primary) Bootstrap button
library(htmltools)
button <- tags$a(class = "btn btn-primary", href = "#", role = "button", "Hello")
preview_button <- function(x) {
  browsable(tags$body(x, button))
}

# Latest bootstrap
preview_button(bootstrap())
# Bootstrap 3
preview_button(bootstrap("3"))
# Bootswatch minty theme
preview_button(bootstrap("minty"))
# Bootswatch sketchy theme
preview_button(bootstrap("sketchy"))
# Bootswatch solar theme with BS3 compatibility
preview_button(bootstrap("solar@4-3"))

}
\seealso{
\code{\link[=bs_theme_set]{bs_theme_set()}}
}
